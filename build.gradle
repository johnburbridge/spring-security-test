/**
 * Spring Security LDAP Test
 * --------------------------
 */
description = "Spring MVC with LDAP authentication"

apply plugin: 'war'
apply plugin: 'jetty'
apply plugin: 'eclipse-wtp'
apply plugin: 'idea'

ext.environment = project.hasProperty('environment') ? environment: 'development';
logger.info("Environment is set to \"${environment}\"");
	
/* unless we're building for a release, we generate snapshots */
version = hasProperty('environment') && environment == 'release' ?
	currentVersion : "${currentVersion}-SNAPSHOT";

sourceCompatibility = 1.6
targetCompatibility = 1.6

/*
 * Adding a source set to hold our integration tests
 */
sourceSets {
	integration
}


configurations {
	integrationCompile {
		extendsFrom testCompile
	}
	integrationRuntime {
		extendsFrom testRuntime
	}
}

repositories {
	mavenCentral()
}

dependencies {

	providedCompile 'javax.servlet:servlet-api:2.5'
	
	providedRuntime 'org.eclipse.jetty:jetty-servlet:7.6.1.v20120215'
	
	compile 'org.slf4j:slf4j-api:1.7.1',
		'org.springframework:spring-webmvc:3.2.2.RELEASE',
		'org.springframework.security:spring-security-core:3.1.3.RELEASE',
		'org.springframework.security:spring-security-web:3.1.3.RELEASE',
		'org.springframework.security:spring-security-config:3.1.3.RELEASE',
		'org.springframework.security:spring-security-ldap:3.1.3.RELEASE',
		'org.apache.directory.server:apacheds-all:2.0.0-M10', //2.0.0-M10
		'org.apache.tiles:tiles-core:3.0.1',
		'org.apache.tiles:tiles-template:3.0.1',
		'org.apache.tiles:tiles-jsp:3.0.1',
		'org.apache.tiles:tiles-extras:3.0.1'
		
	testCompile 'junit:junit:4.11',
		'org.mockito:mockito-all:1.8.5',
		'org.springframework:spring-test:3.2.2.RELEASE'

	runtime 'cglib:cglib:2.2.2',
		'org.slf4j:slf4j-simple:1.7.1'
	
	integrationCompile sourceSets.main.output,
		configurations.testCompile,
		sourceSets.test.output
	
	integrationRuntime configurations.testRuntime,
		configurations.testCompile
}

war {
	manifest {
		attributes 'Implementation-Title': project.name,
			'Implementation-Vendor': 'metabuild.org',
			'Implementation-Version': version
	}
}

/*
 * Defines the test task for the intergration source set
 */
task integrationTest(type: Test) {
	testClassesDir = sourceSets.integration.output.classesDir
	classpath = sourceSets.integration.runtimeClasspath
}

test {
	exclude '**/AbstractSpringEnabledTest*'
	systemProperty 'spring.profiles.active', 'default, test'
}

integrationTest {
	systemProperty 'spring.profiles.active', 'default, test'
}

/*
 * Setup jetty to run local integration tests
 */
jettyRun {
	doFirst {
		System.setProperty('spring.profiles.active', 'default, dev')
		System.setProperty('user.dir', "${projectDir}")
	}
	// if running from a development environment, keep Jetty running in the foreground
	daemon = (project.hasProperty('environment') && environment != 'development')
	httpPort = 9090;
	contextPath = '/';
}

[jettyRun, jettyRunWar, jettyStop]*.stopPort = 9091
[jettyRun, jettyRunWar, jettyStop]*.stopKey = 'stopKey'

/*
 *  for non-development builds, make sure we slot the integration
 *  tests into the build cycle. integration tests come in after
 *  war, assembly and regular checks, but before build
 */
if (project.hasProperty('environment') && environment == 'build' ) {
	jettyRun.dependsOn([check, integrationClasses])
	integrationTest.dependsOn(jettyRun)
	jettyStop.dependsOn(integrationTest)
	build.dependsOn(jettyStop)
}
